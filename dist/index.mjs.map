{"mappings":"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","sources":["src/ravencoinWallet.ts","src/contants.ts"],"sourcesContent":["\r\nconst bitcore = require(\"bitcore-lib\");\r\nconst coininfo = require(\"coininfo\");\r\n\r\nconst { getRPC, methods } = require(\"@ravenrebels/ravencoin-rpc\");\r\nimport RavencoinKey from \"@ravenrebels/ravencoin-key\";\r\nimport { IAddressMetaData } from \"./Types\";\r\nconst { ONE_FULL_COIN } = require(\"./contants\");\r\n\r\nconst URL_MAINNET = \"https://rvn-rpc-mainnet.ting.finance/rpc\";\r\nconst URL_TESTNET = \"https://rvn-rpc-testnet.ting.finance/rpc\"\r\n\r\n//Avoid singleton (anti-pattern)\r\n//Meaning multiple instances of the wallet must be able to co-exist\r\n\r\n\r\n\r\nclass Wallet {\r\n    rpc = getRPC(\r\n        \"anonymous\",\r\n        \"anonymous\",\r\n        URL_MAINNET\r\n    );\r\n    _mnemonic = \"\";\r\n\r\n    addressObjects: Array<IAddressMetaData> = [];\r\n\r\n    addressPosition = 0;\r\n\r\n    getAddressObjects() {\r\n        return this.addressObjects;\r\n    }\r\n    getAddresses(): Array<string> {\r\n        const addresses = this.addressObjects.map(obj => {\r\n            return obj.address\r\n        });\r\n        return addresses;\r\n    }\r\n\r\n    async init(options: IOptions) {\r\n\r\n        //VALIDATION\r\n        if (!options) {\r\n            throw Error(\"option argument is mandatory\");\r\n        }\r\n        if (!options.mnemonic) {\r\n            throw Error(\"option.mnemonic is mandatory\");\r\n        }\r\n        if (options.rpc_username && options.rpc_password && options.rpc_url) {\r\n\r\n            this.rpc = getRPC(options.rpc_username, options.rpc_password, options.rpc_url);\r\n        }\r\n\r\n        if (options.network === \"rvn-test\" && !options.rpc_url) {\r\n            this.rpc = getRPC(\"anonymous\", \"anonymous\", URL_TESTNET);\r\n        }\r\n\r\n        //DERIVE ADDRESSES BIP44, external 20 unused (that is no history, not no balance)\r\n        //TODO improve performance by creating blocks of 20 addresses and check history for all 20 at once\r\n        //That is one history lookup intead of 20\r\n        this._mnemonic = options.mnemonic;\r\n        let isLast20ExternalAddressesUnused = false;\r\n        const ACCOUNT = 0;\r\n        const network = options.network || \"rvn\";\r\n\r\n        while (isLast20ExternalAddressesUnused === false) {\r\n\r\n            const tempAddresses = [] as string[];\r\n\r\n            for (let i = 0; i < 20; i++) {\r\n\r\n                const o = RavencoinKey.getAddressPair(network, this._mnemonic, ACCOUNT, this.addressPosition);\r\n                this.addressObjects.push(o.external);\r\n                this.addressObjects.push(o.internal);\r\n                this.addressPosition++;\r\n\r\n                tempAddresses.push(o.external.address + \"\");\r\n\r\n            }\r\n            //If no history, break            \r\n            isLast20ExternalAddressesUnused = false === await this.hasHistory(tempAddresses);\r\n        }\r\n    }\r\n    async hasHistory(addresses: Array<string>): Promise<boolean> {\r\n\r\n        const includeAssets = true;\r\n        const obj = {\r\n            addresses,\r\n        };\r\n        const asdf = await this.rpc(methods.getaddresstxids, [obj, includeAssets]);\r\n        return asdf.length > 0;\r\n    }\r\n\r\n\r\n    async _getFirstUnusedAddress(external: boolean) {\r\n\r\n        const addresses = this.getAddresses();\r\n        //even addresses are external, odd address are internal/changes\r\n\r\n        for (let counter = 0; counter < addresses.length; counter++) {\r\n\r\n            if (external && counter % 2 !== 0) {\r\n                continue;\r\n            }\r\n            const address = addresses[counter];\r\n\r\n            //If an address has tenth of thousands of transactions, getHistory will throw an exception\r\n\r\n            const asdf = await this.hasHistory([address]);\r\n\r\n            if (asdf === false) {\r\n                return address;\r\n            }\r\n        }\r\n\r\n\r\n        //IF we have not found one, return the first address\r\n        return addresses[0];\r\n\r\n    }\r\n\r\n\r\n    async getReceiveAddress() {\r\n\r\n        const isExternal = true;\r\n        return this._getFirstUnusedAddress(isExternal)\r\n    }\r\n\r\n    async getChangeAddress() {\r\n        const isExternal = false;\r\n        return this._getFirstUnusedAddress(isExternal)\r\n    }\r\n    async getUTXOs() {\r\n        return this.rpc(methods.getaddressutxos, [{ addresses: this.getAddresses() }]);\r\n    }\r\n\r\n\r\n    getPrivateKeyByAddress(address: string) {\r\n\r\n        const f = this.addressObjects.find(a => a.address === address);\r\n\r\n        if (!f) {\r\n            return undefined;\r\n        }\r\n        return f.WIF;\r\n\r\n    }\r\n\r\n\r\n    async send(toAddress: string, amount: number) {\r\n\r\n        if (amount < 0) {\r\n            throw Error(\"Amount cannot be negative\");\r\n        }\r\n        if (!toAddress) {\r\n            throw Error(\"toAddress seems invalid\");\r\n        }\r\n        const addresses = this.getAddresses();\r\n        const UTXOs = await this.getUTXOs();\r\n\r\n        //Add Ravencoin as Network to BITCORE \r\n        //@ts-ignore \r\n        const d = coininfo.ravencoin.main.toBitcore();\r\n        d.name = \"ravencoin\";\r\n        d.alias = \"RVN\";\r\n        bitcore.Networks.add(d);\r\n\r\n        //According to the source file bitcore.Networks.get has two arguments, the second argument keys is OPTIONAL\r\n        //The TypescriptTypes says that the second arguments is mandatory, so ignore that\r\n        //@ts-ignore \r\n        const ravencoin = bitcore.Networks.get(\"RVN\");\r\n\r\n        //GET UNSPET OUTPUTS (UTXO)\r\n        //Configure RPC bridge\r\n\r\n        const balance = await this.rpc(methods.getaddressbalance, [\r\n            { addresses: addresses },\r\n        ]);\r\n        if (balance.balance) {\r\n            const b = balance.balance / 1e8;\r\n\r\n            if (b < amount) {\r\n                throw Error(\"Not enough money, \" + b);\r\n            }\r\n\r\n        }\r\n\r\n        //GET UNSPENT TRANSACTION OUTPUTS\r\n        const unspent = await this.rpc(methods.getaddressutxos, [\r\n            { addresses: addresses },\r\n        ]);\r\n\r\n        if (unspent.length === 0) {\r\n\r\n            throw Error(\"No unspent transactions outputs\");\r\n        }\r\n\r\n        const transaction = new bitcore.Transaction();\r\n        const utxoObjects = UTXOs.map(u => new bitcore.Transaction.UnspentOutput(u))\r\n\r\n        const privateKeys = utxoObjects.map(utxo => {\r\n            const addy = utxo.address.toString();\r\n            const key = this.getPrivateKeyByAddress(addy);\r\n            const privateKey = new bitcore.PrivateKey(key);\r\n            return privateKey;\r\n        });\r\n\r\n        transaction.from(utxoObjects);\r\n        transaction.fee(ONE_FULL_COIN * 0.02);\r\n        transaction.to(toAddress, amount * ONE_FULL_COIN);\r\n        transaction.change(addresses[1]); //TODO make dynamic\r\n        transaction.sign(privateKeys);\r\n\r\n        return await this.rpc(methods.sendrawtransaction, [transaction.serialize()])\r\n\r\n    }\r\n    async getAssets() {\r\n\r\n        const includeAssets = true;\r\n        const params = [{ \"addresses\": this.getAddresses() }, includeAssets];\r\n        const balance = await this.rpc(methods.getaddressbalance, params);\r\n\r\n        //Remove RVN\r\n        const result = balance.filter(obj => {\r\n            return obj.assetName !== \"RVN\";\r\n        })\r\n        return result;\r\n    }\r\n    async getBalance() {\r\n        const includeAssets = false;\r\n        const params = [{ \"addresses\": this.getAddresses() }, includeAssets];\r\n        const balance = await this.rpc(methods.getaddressbalance, params);\r\n\r\n        return balance.balance / ONE_FULL_COIN;\r\n    }\r\n\r\n}\r\n\r\nexport async function createInstance(options) {\r\n    const wallet = new Wallet();\r\n    await wallet.init(options);\r\n    return wallet\r\n\r\n}\r\n\r\nexport interface IOptions {\r\n    rpc_username?: string;\r\n    rpc_password?: string;\r\n    rpc_url?: string;\r\n    mnemonic: string;\r\n    network?: \"rvn\" | \"rvn-test\";\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const ONE_FULL_COIN = 1e8;"],"names":[],"version":3,"file":"index.mjs.map"}