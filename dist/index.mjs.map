{"mappings":"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","sources":["src/ravencoinWallet.ts","src/blockchain/blockchain.ts","src/contants.ts","src/blockchain/Transactor.ts"],"sourcesContent":["const bitcore = require(\"bitcore-lib\");\nconst coininfo = require(\"coininfo\");\nimport * as blockchain from \"./blockchain/blockchain\";\nimport { getRPC, methods } from \"@ravenrebels/ravencoin-rpc\";\nimport RavencoinKey from \"@ravenrebels/ravencoin-key\";\nimport { IAddressDelta, IAddressMetaData, ISendResult, IUTXO } from \"./Types\";\nimport { ONE_FULL_COIN } from \"./contants\";\n\nimport * as Transactor from \"./blockchain/Transactor\";\n\nconst URL_MAINNET = \"https://rvn-rpc-mainnet.ting.finance/rpc\";\nconst URL_TESTNET = \"https://rvn-rpc-testnet.ting.finance/rpc\";\n\ninterface ISend {\n  assetName?: string;\n  toAddress: string;\n  amount: number;\n}\n\n//Avoid singleton (anti-pattern)\n//Meaning multiple instances of the wallet must be able to co-exist\n\nclass Wallet {\n  rpc = getRPC(\"anonymous\", \"anonymous\", URL_MAINNET);\n  _mnemonic = \"\";\n\n  addressObjects: Array<IAddressMetaData> = [];\n  receiveAddress = \"\";\n  addressPosition = 0;\n\n  getAddressObjects() {\n    return this.addressObjects;\n  }\n  getAddresses(): Array<string> {\n    const addresses = this.addressObjects.map((obj) => {\n      return obj.address;\n    });\n    return addresses;\n  }\n\n  async init(options: IOptions) {\n    let username = \"anonymous\";\n    let password = \"anonymous\";\n    let url = URL_MAINNET;\n\n    //VALIDATION\n    if (!options) {\n      throw Error(\"option argument is mandatory\");\n    }\n\n    if (!options.mnemonic) {\n      throw Error(\"option.mnemonic is mandatory\");\n    }\n\n    url = options.rpc_url || url;\n    password = options.rpc_password || url;\n    username = options.rpc_username || url;\n\n    if (options.network === \"rvn-test\" && !options.rpc_url) {\n      url = URL_TESTNET;\n    }\n\n    this.rpc = getRPC(username, password, url);\n    //DERIVE ADDRESSES BIP44, external 20 unused (that is no history, not no balance)\n    //TODO improve performance by creating blocks of 20 addresses and check history for all 20 at once\n    //That is one history lookup intead of 20\n    this._mnemonic = options.mnemonic;\n    let isLast20ExternalAddressesUnused = false;\n    const ACCOUNT = 0;\n    const network = options.network || \"rvn\";\n\n    while (isLast20ExternalAddressesUnused === false) {\n      const tempAddresses = [] as string[];\n\n      for (let i = 0; i < 20; i++) {\n        const o = RavencoinKey.getAddressPair(\n          network,\n          this._mnemonic,\n          ACCOUNT,\n          this.addressPosition\n        );\n        this.addressObjects.push(o.external);\n        this.addressObjects.push(o.internal);\n        this.addressPosition++;\n\n        tempAddresses.push(o.external.address + \"\");\n      }\n      //If no history, break\n      isLast20ExternalAddressesUnused =\n        false === (await this.hasHistory(tempAddresses));\n    }\n  }\n  async hasHistory(addresses: Array<string>): Promise<boolean> {\n    const includeAssets = true;\n    const obj = {\n      addresses,\n    };\n    const asdf = await this.rpc(methods.getaddresstxids, [obj, includeAssets]);\n    return asdf.length > 0;\n  }\n\n  async _getFirstUnusedAddress(external: boolean) {\n    //First, check if lastReveivedAddress\n    if (external === true && this.receiveAddress) {\n      const asdf = await this.hasHistory([this.receiveAddress]);\n      if (asdf === false) {\n        console.log(\"Receive address no need to change\");\n        return this.receiveAddress;\n      }\n    }\n\n    const addresses = this.getAddresses();\n    //even addresses are external, odd address are internal/changes\n\n    for (let counter = 0; counter < addresses.length; counter++) {\n      if (external && counter % 2 !== 0) {\n        continue;\n      }\n      const address = addresses[counter];\n\n      //If an address has tenth of thousands of transactions, getHistory will throw an exception\n\n      const asdf = await this.hasHistory([address]);\n\n      if (asdf === false) {\n        if (external === true) {\n          this.receiveAddress = address;\n        }\n        return address;\n      }\n    }\n\n    //IF we have not found one, return the first address\n    return addresses[0];\n  }\n\n  async getMempool(): Promise<IAddressDelta[]> {\n    const method = methods.getaddressmempool;\n    const includeAssets = true;\n    const params = [{ addresses: this.getAddresses() }, includeAssets];\n    return this.rpc(method, params);\n  }\n  async getReceiveAddress() {\n    const isExternal = true;\n    return this._getFirstUnusedAddress(isExternal);\n  }\n\n  async getChangeAddress() {\n    const isExternal = false;\n    return this._getFirstUnusedAddress(isExternal);\n  }\n  async getUTXOs() {\n    return this.rpc(methods.getaddressutxos, [\n      { addresses: this.getAddresses() },\n    ]);\n  }\n\n  getPrivateKeyByAddress(address: string) {\n    const f = this.addressObjects.find((a) => a.address === address);\n\n    if (!f) {\n      return undefined;\n    }\n    return f.WIF;\n  }\n\n  async send(options: ISend): Promise<ISendResult> {\n    const { amount, assetName, toAddress } = options;\n\n    //Validation\n    if (!toAddress) {\n      throw Error(\"Wallet.send  toAddress is mandatory\");\n    }\n    if (!amount) {\n      throw Error(\"Wallet.send  amount is mandatory\");\n    }\n\n    if (assetName && assetName !== \"RVN\") {\n      return Transactor.send(\n        this.rpc,\n        this.addressObjects,\n        toAddress,\n        amount,\n        assetName\n      );\n    } else {\n      return this._sendRavencoin(toAddress, amount);\n    }\n  }\n  private async _sendRavencoin(\n    toAddress: string,\n    amount: number\n  ): Promise<ISendResult> {\n    if (amount < 0) {\n      throw Error(\"Amount cannot be negative\");\n    }\n    if (!toAddress) {\n      throw Error(\"toAddress seems invalid\");\n    }\n\n    const addresses = this.getAddresses();\n    const sendResult: ISendResult = {\n      transactionId: \"\",\n      debug: {},\n    };\n    //Add Ravencoin as Network to BITCORE\n    //@ts-ignore\n    const d = coininfo.ravencoin.main.toBitcore();\n    d.name = \"ravencoin\";\n    d.alias = \"RVN\";\n    bitcore.Networks.add(d);\n\n    //According to the source file bitcore.Networks.get has two arguments, the second argument keys is OPTIONAL\n    //The TypescriptTypes says that the second arguments is mandatory, so ignore that\n    //@ts-ignore\n    const ravencoin = bitcore.Networks.get(\"RVN\");\n\n    //GET UNSPET OUTPUTS (UTXO)\n    //Configure RPC bridge\n\n    const balance = await this.rpc(methods.getaddressbalance, [\n      { addresses: addresses },\n    ]);\n    if (balance.balance) {\n      const b = balance.balance / ONE_FULL_COIN;\n\n      if (b < amount) {\n        throw Error(\"Not enough money, \" + b);\n      }\n    }\n\n    //GET UNSPENT TRANSACTION OUTPUTS\n    let allUnspent = await this.getUTXOs();\n\n    const mempool = await blockchain.getMempool(this.rpc);\n\n    //Filter out UTXOs currently in mempool\n    allUnspent = allUnspent.filter(\n      (UTXO) => Transactor.isUTXOInMempool(mempool, UTXO) === false\n    );\n\n    //GET ENOUGH UTXOs FOR THIS TRANSACTION\n    const unspent = Transactor.getEnoughUTXOs(\n      allUnspent,\n      amount + 1 /*to cover the fee*/\n    );\n    if (unspent.length === 0) {\n      throw Error(\"No unspent transactions outputs\");\n    }\n    console.log(\"Will use\", unspent.length, \"UTXO to send\", amount);\n    let amo = 0;\n    unspent.map((utxo) => (amo += utxo.satoshis / 1e8));\n    console.log(\"Amount of UTXO\", amo);\n    const transaction = new bitcore.Transaction();\n\n    const utxoObjects = unspent.map(\n      (u) => new bitcore.Transaction.UnspentOutput(u)\n    );\n\n    const changeAddress = await this._getFirstUnusedAddress(false);\n\n    const privateKeys = utxoObjects.map((utxo) => {\n      const addy = utxo.address.toString();\n      const key = this.getPrivateKeyByAddress(addy);\n      const privateKey = new bitcore.PrivateKey(key);\n\n      return privateKey;\n    });\n\n    transaction.from(utxoObjects);\n    transaction.to(toAddress, amount * ONE_FULL_COIN);\n    transaction.change(changeAddress);\n\n    //UPDATE FEE\n    transaction.fee(transaction.getFee() * 100);\n    sendResult.debug.fee = transaction.getFee() * 100;\n\n    console.log(\n      \"OK want to send\",\n      amount,\n      \"has got\",\n      amo,\n      \"and fee is\",\n      transaction.getFee() / 1e8\n    );\n    transaction.sign(privateKeys);\n\n    const id = await this.rpc(methods.sendrawtransaction, [\n      transaction.serialize(),\n    ]);\n\n    sendResult.transactionId = id;\n    return sendResult;\n  }\n  async getAssets() {\n    const includeAssets = true;\n    const params = [{ addresses: this.getAddresses() }, includeAssets];\n    const balance = await this.rpc(methods.getaddressbalance, params);\n\n    //Remove RVN\n    const result = balance.filter((obj) => {\n      return obj.assetName !== \"RVN\";\n    });\n    return result;\n  }\n  async getBalance() {\n    const includeAssets = false;\n    const params = [{ addresses: this.getAddresses() }, includeAssets];\n    const balance = await this.rpc(methods.getaddressbalance, params);\n\n    return balance.balance / ONE_FULL_COIN;\n  }\n}\n\nexport default {\n  createInstance,\n};\nexport async function createInstance(options: IOptions) {\n  const wallet = new Wallet();\n  await wallet.init(options);\n  return wallet;\n}\n\nexport interface IOptions {\n  rpc_username?: string;\n  rpc_password?: string;\n  rpc_url?: string;\n  mnemonic: string;\n  network?: \"rvn\" | \"rvn-test\";\n}\n","import {\n  IUTXO,\n  IValidateAddressResponse,\n  IVout,\n  IVout_when_creating_transactions,\n  RPCType,\n} from \"../Types\";\nimport { ITransaction } from \"../Types\";\n\nconst ONE_HUNDRED_MILLION = 1e8;\n\nexport function getAddressDeltas(rpc: RPCType, addresses: string[]) {\n  return rpc(\"getaddressdeltas\", [\n    {\n      addresses: addresses,\n      assetName: \"\",\n    },\n  ]);\n}\nexport function sendRawTransaction(rpc: RPCType, signedTransaction: any) {\n  const p = rpc(\"sendrawtransaction\", [signedTransaction.hex]);\n  p.catch((e: any) => {\n    console.log(\"send raw transaction\");\n    console.dir(e);\n  });\n  return p;\n}\nexport function signRawTransaction(\n  rpc: RPCType,\n  rawTransactionHex: any,\n  privateKeys: Array<string>\n) {\n  const s = rpc(\"signrawtransaction\", [\n    rawTransactionHex,\n    null,\n    privateKeys,\n  ]);\n  return s;\n}\n\nexport function decodeRawTransaction(rpc: RPCType, raw: string) {\n  return rpc(\"decoderawtransaction\", [raw]);\n}\n\nexport function getRawTransaction(rpc: RPCType, id: string): any {\n  return rpc(\"getrawtransaction\", [id, true]);\n}\nexport function createRawTransaction(\n  rpc: RPCType,\n  inputs: any,\n  outputs: any\n): Promise<string> {\n  return rpc(\"createrawtransaction\", [inputs, outputs]);\n}\n\nexport async function validateAddress(\n  rpc: RPCType,\n  address: string\n): Promise<IValidateAddressResponse> {\n  return rpc(\"validateaddress\", [address]);\n}\nexport function getBalance(\n  rpc: RPCType,\n  addresses: Array<string>\n): Promise<any> {\n  const includeAssets = true;\n  const promise = rpc(\"getaddressbalance\", [\n    { addresses: addresses },\n    includeAssets,\n  ]);\n  return promise;\n}\n\nexport function _sortUTXOs(list: Array<IUTXO>) {\n  //Remember, sort mutates the underlaying array\n  //Sort by satoshis, lowest first to prevent dust.\n  return list.sort(function (a, b) {\n    if (a.satoshis > b.satoshis) {\n      return 1;\n    }\n    if (a.satoshis < b.satoshis) {\n      return -1;\n    }\n    return 0;\n  });\n}\nexport async function getRavenUnspentTransactionOutputs(\n  rpc: RPCType,\n  addresses: Array<string>\n): Promise<Array<IUTXO>> {\n  const list: Array<IUTXO> = await rpc(\"getaddressutxos\", [\n    { addresses },\n  ]);\n  _sortUTXOs(list);\n  return list;\n}\nexport function getAssetUnspentTransactionOutputs(\n  rpc: RPCType,\n  addresses: Array<string>,\n  assetName: string\n): Promise<Array<IUTXO>> {\n  const assets = rpc(\"getaddressutxos\", [{ addresses, assetName }]);\n  return assets;\n}\n\nexport function getAllUnspentTransactionOutputs(\n  rpc: RPCType,\n  addresses: Array<string>\n) {\n  /*\n  Seems like getaddressutxos either return RVN UTXOs or asset UTXOs\n  Never both.\n  So we make two requests and we join the answer\n  */\n  const raven = rpc(\"getaddressutxos\", [{ addresses }]);\n  const assets = rpc(\"getaddressutxos\", [{ addresses, assetName: \"*\" }]);\n\n  return Promise.all([raven, assets]).then((values: Array<any>) => {\n    const all = values[0].concat(values[1]);\n    return all;\n  });\n}\nexport async function getMempool(rpc: RPCType): Promise<Array<ITransaction>> {\n  const ids = await rpc(\"getrawmempool\", []);\n\n  const result: any = [];\n  for (const id of ids) {\n    const transaction = await getRawTransaction(rpc, id);\n    result.push(transaction);\n  }\n  return result;\n}\nexport function convertUTXOsToVOUT(\n  UTXOs: Array<IUTXO>\n): Array<IVout_when_creating_transactions> {\n  const inputs = UTXOs.map(function (bla) {\n    //OK we have to convert from \"unspent\" format to \"vout\"\n\n    const obj = {\n      txid: bla.txid,\n      vout: bla.outputIndex,\n      address: bla.address,\n    };\n    return obj;\n  });\n  return inputs;\n}\n","export const ONE_FULL_COIN = 1e8;","import {\n  IAddressMetaData,\n  ISendResult,\n  IUTXO,\n  IVout,\n  IVout_when_creating_transactions,\n  RPCType,\n} from \"../Types\";\nimport * as blockchain from \"./blockchain\";\n\nimport { ITransaction } from \"../Types\";\nimport { ONE_FULL_COIN } from \"../contants\";\n\ninterface IInternalSendIProp {\n  fromAddressObjects: Array<IAddressMetaData>;\n  amount: number;\n  assetName: string;\n  toAddress: string;\n  rpc: RPCType;\n}\n\nasync function isValidAddress(rpc: RPCType, address: string) {\n  const obj = await blockchain.validateAddress(rpc, address);\n  return obj.isvalid === true;\n}\n\nfunction sumOfUTXOs(UTXOs: Array<IUTXO>) {\n  let unspentRavencoinAmount = 0;\n  UTXOs.map(function (item) {\n    const newValue = item.satoshis / 1e8;\n    unspentRavencoinAmount = unspentRavencoinAmount + newValue;\n  });\n  return unspentRavencoinAmount;\n}\n/*\n\n    \"Chicken and egg\" situation.\n    We need to calculate how much we shall pay in fees based on the size of the transaction.\n    When adding inputs/outputs for the fee, we increase the fee.\n\n    Lets start by first assuming that we will pay 1 RVN in fee (that is sky high).\n    Than we check the size of the transaction and then we just adjust the change output so the fee normalizes\n*/\nasync function getFee(\n  rpc: RPCType,\n  inputs: Array<IVout_when_creating_transactions>,\n  outputs: Array<IVout>\n): Promise<number> {\n  const ONE_KILOBYTE = 1024;\n  //Create a raw transaction to get an aproximation for transaction size.\n  const raw = await blockchain.createRawTransaction(rpc, inputs, outputs);\n\n  //Get the length of the string bytes not the string\n  //This is NOT the exact size since we will add an output for the change address to the transaction\n  //Perhaps we should calculate size plus 10%?\n  const size = Buffer.from(raw).length / ONE_KILOBYTE;\n  console.log(\"Size of raw transaction\", size);\n  let fee = 0.02;\n  //TODO should ask the \"blockchain\" **estimatesmartfee**\n\n  return fee * Math.max(1, size);\n}\n\nasync function _send(options: IInternalSendIProp): Promise<ISendResult> {\n  const { amount, assetName, fromAddressObjects, toAddress, rpc } = options;\n\n  const sendResult: ISendResult = {\n    transactionId: \"undefined\",\n    debug: [],\n  };\n  const MAX_FEE = 4;\n\n  const isAssetTransfer = assetName !== \"RVN\";\n\n  //VALIDATION\n  if ((await isValidAddress(rpc, toAddress)) === false) {\n    throw Error(\"Invalid address \" + toAddress);\n  }\n  if (amount < 0) {\n    throw Error(\"Cant send less than zero\");\n  }\n\n  const addresses = fromAddressObjects.map((a) => a.address);\n\n  //TODO change addresses should be checked with the blockchain,\n  //find first unused change address\n  const ravencoinChangeAddress = addresses[1];\n  const assetChangeAddress = addresses[3];\n\n  let UTXOs = await blockchain.getRavenUnspentTransactionOutputs(\n    rpc,\n    addresses\n  );\n\n  //Remove UTXOs that are currently in mempool\n  const mempool = await blockchain.getMempool(rpc);\n\n  UTXOs = UTXOs.filter((UTXO) => isUTXOInMempool(mempool, UTXO) === false);\n\n  const enoughRavencoinUTXOs = getEnoughUTXOs(\n    UTXOs,\n    isAssetTransfer ? 1 : amount + MAX_FEE\n  );\n\n  //Sum up the whole unspent amount\n  let unspentRavencoinAmount = sumOfUTXOs(enoughRavencoinUTXOs);\n  if (unspentRavencoinAmount <= 0) {\n    throw Error(\n      \"Not enough RVN to transfer asset, perhaps your wallet has pending transactions\"\n    );\n  }\n  sendResult.debug.unspentRVNAmount = unspentRavencoinAmount.toLocaleString();\n\n  if (isAssetTransfer === false) {\n    if (amount > unspentRavencoinAmount) {\n      throw Error(\n        \"Insufficient funds, cant send \" +\n          amount.toLocaleString() +\n          \" only have \" +\n          unspentRavencoinAmount.toLocaleString()\n      );\n    }\n  }\n\n  const rvnAmount = isAssetTransfer ? 0 : amount;\n\n  const inputs = blockchain.convertUTXOsToVOUT(enoughRavencoinUTXOs);\n  const outputs: any = {};\n  //Add asset inputs\n  if (isAssetTransfer === true) {\n    await addAssetInputsAndOutputs(\n      rpc,\n      addresses,\n      assetName,\n      amount,\n      inputs,\n      outputs,\n      toAddress,\n      assetChangeAddress\n    );\n  } else if (isAssetTransfer === false) {\n    outputs[toAddress] = rvnAmount;\n  }\n\n  const fee = await getFee(rpc, inputs, outputs);\n  sendResult.debug.assetName = assetName;\n  sendResult.debug.fee = fee;\n  sendResult.debug.rvnAmount = 0;\n\n  const ravencoinChangeAmount = unspentRavencoinAmount - rvnAmount - fee;\n\n  sendResult.debug.rvnChangeAmount = ravencoinChangeAmount;\n\n  //Obviously we only add change address if there is any change\n  if (getTwoDecimalTrunc(ravencoinChangeAmount) > 0) {\n    outputs[ravencoinChangeAddress] = getTwoDecimalTrunc(ravencoinChangeAmount);\n  }\n  //Now we have enough UTXos, lets create a raw transactions\n\n  const raw = await blockchain.createRawTransaction(rpc, inputs, outputs);\n\n  //OK lets find the private keys (WIF) for input addresses\n  type TPrivateKey = {\n    [key: string]: string;\n  };\n  const privateKeys: TPrivateKey = {};\n  inputs.map(function (input: IVout_when_creating_transactions) {\n    const addy = input.address;\n    const addressObject = fromAddressObjects.find((a) => a.address === addy);\n    if (addressObject) {\n      privateKeys[addy] = addressObject.WIF;\n    }\n  });\n\n  //Sign the transaction\n  const keys: Array<string> = Object.values(privateKeys);\n  const signedTransactionPromise = blockchain.signRawTransaction(\n    rpc,\n    raw,\n    keys\n  );\n  signedTransactionPromise.catch((e: any) => {\n    console.dir(e);\n  });\n\n  const signedTransaction = await signedTransactionPromise;\n\n  const txid = await blockchain.sendRawTransaction(rpc, signedTransaction);\n  sendResult.transactionId = txid;\n  return sendResult;\n}\n\nasync function addAssetInputsAndOutputs(\n  rpc: RPCType,\n  addresses: string[],\n  assetName: string,\n  amount: number,\n  inputs: IVout_when_creating_transactions[],\n  outputs: any,\n  toAddress: string,\n  assetChangeAddress: string\n) {\n  let assetUTXOs = await blockchain.getAssetUnspentTransactionOutputs(\n    rpc,\n    addresses,\n    assetName\n  );\n\n  const mempool = await blockchain.getMempool(rpc);\n  assetUTXOs = assetUTXOs.filter(\n    (UTXO) => isUTXOInMempool(mempool, UTXO) === false\n  );\n\n  const _UTXOs = getEnoughUTXOs(assetUTXOs, amount);\n  const tempInputs = blockchain.convertUTXOsToVOUT(_UTXOs);\n  tempInputs.map((item) => inputs.push(item));\n\n  outputs[toAddress] = {\n    transfer: {\n      [assetName]: amount,\n    },\n  };\n\n  const assetSum = sumOfUTXOs(_UTXOs);\n\n  //Only add change address if needed\n  if (assetSum - amount > 0) {\n    outputs[assetChangeAddress] = {\n      transfer: {\n        [assetName]: assetSum - amount,\n      },\n    };\n  }\n}\n\nfunction getTwoDecimalTrunc(num: number) {\n  //Found answer here https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n  //In JavaScript the number 77866.98 minus 111 minus 0.2 equals 77755.95999999999\n  //We want it to be 77755.96\n  return Math.trunc(num * 100) / 100;\n}\n\nexport async function send(\n  rpc: RPCType,\n  fromAddressObjects: Array<IAddressMetaData>,\n  toAddress: string,\n  amount: number,\n  assetName: string\n) {\n  return _send({ rpc, fromAddressObjects, toAddress, amount, assetName });\n}\n\nexport function getEnoughUTXOs(\n  utxos: Array<IUTXO>,\n  amount: number\n): Array<IUTXO> {\n  /*\n  Scenario ONE\n  Bob has 300 UTXO with 1 RVN each.\n  Bob has one UTXO with 400 RVN.\n\n  Bob intends to send 300 RVN\n  In this case the best thing to do is to use the single 400 UTXO\n\n  SCENARIO TWO\n\n  Alice have tons of small UTXOs like 0.03 RVN, 0.2 RVN, she wants to send 5 RVN.\n  In this case it makes sense to clean up the \"dust\", so you dont end up with a lot of small change.\n\n\n  */\n\n  //For small transactions,start with small transactions first.\n  let tempAmount = 0;\n\n  const returnValue: Array<IUTXO> = [];\n\n  utxos.map(function (utxo) {\n    if (utxo.satoshis !== 0 && tempAmount < amount) {\n      const value = utxo.satoshis / ONE_FULL_COIN;\n      tempAmount = tempAmount + value;\n      returnValue.push(utxo);\n    }\n  });\n\n  //Did we use a MASSIVE amount of UTXOs to safisfy this transaction?\n  //In this case check if we do have one single UTXO that can satisfy our needs\n  if (returnValue.length > 10) {\n    const largerUTXO = utxos.find(\n      (utxo) => utxo.satoshis / ONE_FULL_COIN > amount\n    );\n\n    if (largerUTXO) {\n      //Send this one UTXO that covers it all\n      return [largerUTXO];\n    }\n  }\n  return returnValue;\n}\n\nexport function isUTXOInMempool(\n  mempool: Array<ITransaction>,\n  UTXO: IUTXO\n): boolean {\n  function format(transactionId: string, index: number) {\n    return transactionId + \"_\" + index;\n  }\n\n  const listOfUTXOsInMempool: Array<string> = [];\n  mempool.map((transaction) => {\n    transaction.vin.map((vin) => {\n      const id = format(vin.txid, vin.vout);\n      listOfUTXOsInMempool.push(id);\n    });\n  });\n\n  const index = listOfUTXOsInMempool.indexOf(\n    format(UTXO.txid, UTXO.outputIndex)\n  );\n  const isInMempool = index > -1;\n\n  return isInMempool;\n}\n"],"names":[],"version":3,"file":"index.mjs.map"}